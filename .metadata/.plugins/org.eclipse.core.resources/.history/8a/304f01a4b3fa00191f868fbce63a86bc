import java.util.Random;

public class Vector {

	private double[] data; 
	
	public Vector(int size) {
		data = new double[size];
	}
	
	public Vector(int size, double[] data) {
		this.data = new double[size];
		this.addData(data);
	}
	
	// populates data with random floating point values
	// in the range 0.0 to 1.0
	public void addRandomData() {
		Random rand = new Random();
		for (int i = 0; i < data.length; i++) {
			data[i] = rand.nextDouble();
		}
	}
	
	// copies the data values
	// throws exception if lengths are not the same
	public void addData(double[] data) {
		if (data.length != this.data.length) {
			throw new IllegalArgumentException("data size mismatch, should be " + 
						this.data.length + ", is " + data.length);
		}
		for (int i = 0; i < data.length; i++) {
			this.data[i] = data[i];
		}
	}
	
	// returns the result of the inner product of this
	// vector with other
	// throws exception if lengths are not the same
	public double innerProduct(Vector other) {
		if (other.data.length != this.data.length) {
			throw new IllegalArgumentException("data size mismatch, should be " + 
						this.data.length + ", is " + other.data.length);
		}
		double result = 0.0;
		for (int i = 0; i < this.data.length; i++) {
			result += this.data[i] * other.data[i];
		}
		return result;
	}
	
	public double getLength() {
		return this.innerProduct(this); 
	}
	
	public void normalize() {
		double length = this.getLength();
		if (length == 0) {
			throw new ArithmeticException("length is zero, cannot normalize");
		}
		for (int i = 0; i < this.data.length; i++) {
			this.data[i] = data[i] / length; 
		}
	}
	
	// returns a new Vector of the value this + alpha * other
	public Vector addVectors(Vector other, double alpha) {
		if (other.data.length != this.data.length) {
			throw new IllegalArgumentException("data size mismatch, should be " + 
						this.data.length + ", is " + other.data.length);
		}
		Vector result = new Vector(data.length);
		for (int i = 0; i < data.length; i++) {
			result.data[i] = this.data[i] + other.data[i] * alpha; 
		}
		return result;
	}
	
	public void multiplyByScalar(double alpha) {
		for (int i = 0; i < this.data.length; i++) {
			this.data[i] *= alpha;
		}
	}
	
	public double[] getData() {
		return this.data.clone();
	}
	
	public Vector makeCopy() {
		return new Vector(this.data.length, this.getData());
	}
	
	
}
