import static org.junit.Assert.*;

import java.util.Arrays;

import org.junit.Test;

public class VectorTest {

	@Test
	public void testAddData() {
		double[] data = {1.0, 2.0, 3.0};
		Vector vector = new Vector(3);
		vector.addData(data);
		assertEquals(Arrays.toString(vector.getData()), Arrays.toString(data));
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void testInvalidLength() {
		double[] data = {1.0, 2.0, 3.0};
		Vector vector = new Vector(4);
		vector.addData(data);		
	}
	
	@Test
	public void testInnerProduct() {
		double[] data1 = {1.0, 1.0, 2.0};
		double[] data2 = {1.0, 3.0, 1.0};
		Vector vector1 = new Vector(3);
		vector1.addData(data1);	
		Vector vector2 = new Vector(3);
		vector2.addData(data2);
		double innerProductActual = vector1.innerProduct(vector2);
		assertEquals(1.0 * 1.0 + 1.0 * 3.0 + 2.0 * 1.0, innerProductActual, 0.0001);
	}
	
	@Test
	public void testAddVectors() {
		double[] data1 = {1.0, 1.0, 2.0};
		double[] data2 = {1.0, 3.0, 1.0};
		double alpha = 2.0;
		double[] resultExpected = {3.0, 7.0, 4.0};
		Vector vector1 = new Vector(3);
		vector1.addData(data1);	
		Vector vector2 = new Vector(3);
		vector2.addData(data2);
		Vector resultActual = vector1.addVectors(vector2, alpha);
		assertEquals(Arrays.toString(resultActual.getData()), Arrays.toString(resultExpected));		
	}
	
	@Test
	public void multiplyByScalar() {
		double[] data1 = {1.0, 0.0, 2.0};
		Vector vector1 = new Vector(3, data1);
		double alpha = 2.0;
		double[] resultExpected = {2.0, 0.0, 4.0};
		Vector resultActual = vector1.multiplyByScalar(alpha);
		assertEquals(Arrays.toString(resultActual.getData()), Arrays.toString(resultExpected));		

	}

}
